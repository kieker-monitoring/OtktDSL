/*
 * generated by Xtext 2.36.0
 */
package kieker.otel.translation.tests

import com.google.inject.Inject
import kieker.otel.translation.otkt.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.scoping.IScopeProvider
import kieker.otel.translation.otkt.OtelRef
import kieker.otel.translation.otkt.OtktPackage
import org.eclipse.xtext.scoping.IScope
import kieker.otel.translation.scoping.OtelSpanScopeProvider
import kieker.otel.translation.scoping.OtktScopeProvider
import kieker.otel.translation.scoping.KiekerReferenceScopeProvider

@ExtendWith(InjectionExtension)
@InjectWith(OtktInjectorProvider)
class OtktParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	IScopeProvider scopeProvider = new KiekerReferenceScopeProvider()
	IScopeProvider scopeProvider2 = new OtelSpanScopeProvider()

	/* @Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}*/
	
	@Test
	def void testScope(){
		val result = parseHelper.parse('''
			Span: as {
				default: string ds 
				attributes: int s
				events: Event: asd{
					message: "zf"
					time_stamp:12
				}
			}
			Record: foo {
				string bar
				
			}
			Record: foos {
				string bar
				string d
			}
			Mapping: as -> foo{
				as.ds to foos.d
				}
		''')
	/* 	val s = result.getMappings()
		for (asa:s){
			val mappingRules=asa.getMappingRules()
			for (mR:mappingRules){
				val leftSide =mR.getLeftSide()
			}
		}*/
		
		val scope = scopeProvider.getScope(result.getMappings().
			get(0).getMappingRules().
			get(0).getRightSide(), OtktPackage.Literals.KIEKER_REFERENCE__REF_ATTRIBUTE
		);
		 scope.allElements.forEach [ element |
            println(element.name)
        ]
        
        val scope2 = scopeProvider2.getScope(result.getMappings().
			get(0).getMappingRules().
			get(0).getLeftSide(), OtktPackage.Literals.OTEL_REF__REF_ATTRIBUTE
		);
		 scope2.allElements.forEach [ element |
            println(element.name)
        ]
        
		Assertions.assertNotNull(result)
	}
}
