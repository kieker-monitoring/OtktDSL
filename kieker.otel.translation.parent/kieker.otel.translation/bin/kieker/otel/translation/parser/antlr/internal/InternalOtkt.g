/*
 * generated by Xtext 2.36.0
 */
grammar InternalOtkt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package kieker.otel.translation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package kieker.otel.translation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import kieker.otel.translation.services.OtktGrammarAccess;

}

@parser::members {

 	private OtktGrammarAccess grammarAccess;

    public InternalOtktParser(TokenStream input, OtktGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected OtktGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getMainMainParserRuleCall_0());
			}
			lv_main_0_0=ruleMain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"main",
					lv_main_0_0,
					"kieker.otel.translation.Otkt.Main");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getOtelSpansOtelSpanParserRuleCall_0_0());
				}
				lv_otelSpans_0_0=ruleOtelSpan
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					add(
						$current,
						"otelSpans",
						lv_otelSpans_0_0,
						"kieker.otel.translation.Otkt.OtelSpan");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getRecordKiekerMonitoringTypeParserRuleCall_1_0());
				}
				lv_record_1_0=ruleKiekerMonitoringType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					add(
						$current,
						"record",
						lv_record_1_0,
						"kieker.otel.translation.Otkt.KiekerMonitoringType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getMappingsMappingParserRuleCall_2_0());
				}
				lv_mappings_2_0=ruleMapping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					add(
						$current,
						"mappings",
						lv_mappings_2_0,
						"kieker.otel.translation.Otkt.Mapping");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getCollectorCollectorParserRuleCall_3_0());
				}
				lv_collector_3_0=ruleCollector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"collector",
						lv_collector_3_0,
						"kieker.otel.translation.Otkt.Collector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMappingAccess().getCustomMappingParserRuleCall_0());
		}
		this_CustomMapping_0=ruleCustomMapping
		{
			$current = $this_CustomMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMappingAccess().getDefaultMappingParserRuleCall_1());
		}
		this_DefaultMapping_1=ruleDefaultMapping
		{
			$current = $this_DefaultMapping_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefaultMapping
entryRuleDefaultMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultMappingRule()); }
	iv_ruleDefaultMapping=ruleDefaultMapping
	{ $current=$iv_ruleDefaultMapping.current; }
	EOF;

// Rule DefaultMapping
ruleDefaultMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='default'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultMappingAccess().getDefaultKeyword_0());
		}
		otherlv_1='mapping'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultMappingAccess().getMappingKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefaultMappingRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getDefaultMappingAccess().getFromOtelSpanCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefaultMappingAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefaultMappingRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getDefaultMappingAccess().getToKiekerRecordCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleOtelSpan
entryRuleOtelSpan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtelSpanRule()); }
	iv_ruleOtelSpan=ruleOtelSpan
	{ $current=$iv_ruleOtelSpan.current; }
	EOF;

// Rule OtelSpan
ruleOtelSpan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Span:'
		{
			newLeafNode(otherlv_0, grammarAccess.getOtelSpanAccess().getSpanKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOtelSpanAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtelSpanRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOtelSpanAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOtelSpanAccess().getDefaultAttributesDefaultAttributesParserRuleCall_3_0());
				}
				lv_defaultAttributes_3_0=ruleDefaultAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOtelSpanRule());
					}
					add(
						$current,
						"defaultAttributes",
						lv_defaultAttributes_3_0,
						"kieker.otel.translation.Otkt.DefaultAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='attributes:'
		{
			newLeafNode(otherlv_4, grammarAccess.getOtelSpanAccess().getAttributesKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOtelSpanAccess().getAttributesSpanAttributeParserRuleCall_5_0());
				}
				lv_attributes_5_0=ruleSpanAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOtelSpanRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"kieker.otel.translation.Otkt.SpanAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getOtelSpanAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleDefaultAttributes
entryRuleDefaultAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultAttributesRule()); }
	iv_ruleDefaultAttributes=ruleDefaultAttributes
	{ $current=$iv_ruleDefaultAttributes.current; }
	EOF;

// Rule DefaultAttributes
ruleDefaultAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='trace:'
			{
				newLeafNode(otherlv_0, grammarAccess.getDefaultAttributesAccess().getTraceKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAttributesAccess().getTraceSpanAttributeParserRuleCall_0_1_0());
					}
					lv_trace_1_0=ruleSpanAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultAttributesRule());
						}
						set(
							$current,
							"trace",
							lv_trace_1_0,
							"kieker.otel.translation.Otkt.SpanAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='parentSpan:'
			{
				newLeafNode(otherlv_2, grammarAccess.getDefaultAttributesAccess().getParentSpanKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAttributesAccess().getParentTraceSpanAttributeParserRuleCall_1_1_0());
					}
					lv_parentTrace_3_0=ruleSpanAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultAttributesRule());
						}
						set(
							$current,
							"parentTrace",
							lv_parentTrace_3_0,
							"kieker.otel.translation.Otkt.SpanAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='spanId:'
			{
				newLeafNode(otherlv_4, grammarAccess.getDefaultAttributesAccess().getSpanIdKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAttributesAccess().getSpanIdSpanAttributeParserRuleCall_2_1_0());
					}
					lv_spanId_5_0=ruleSpanAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultAttributesRule());
						}
						set(
							$current,
							"spanId",
							lv_spanId_5_0,
							"kieker.otel.translation.Otkt.SpanAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6='startT:'
			{
				newLeafNode(otherlv_6, grammarAccess.getDefaultAttributesAccess().getStartTKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAttributesAccess().getStartTimeSpanAttributeParserRuleCall_3_1_0());
					}
					lv_startTime_7_0=ruleSpanAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultAttributesRule());
						}
						set(
							$current,
							"startTime",
							lv_startTime_7_0,
							"kieker.otel.translation.Otkt.SpanAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_8='endT:'
			{
				newLeafNode(otherlv_8, grammarAccess.getDefaultAttributesAccess().getEndTKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAttributesAccess().getEndTimeSpanAttributeParserRuleCall_4_1_0());
					}
					lv_endTime_9_0=ruleSpanAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultAttributesRule());
						}
						set(
							$current,
							"endTime",
							lv_endTime_9_0,
							"kieker.otel.translation.Otkt.SpanAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleKiekerMonitoringType
entryRuleKiekerMonitoringType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKiekerMonitoringTypeRule()); }
	iv_ruleKiekerMonitoringType=ruleKiekerMonitoringType
	{ $current=$iv_ruleKiekerMonitoringType.current; }
	EOF;

// Rule KiekerMonitoringType
ruleKiekerMonitoringType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getKiekerMonitoringTypeAccess().getDefaultMonitoringRecordParserRuleCall_0());
		}
		this_DefaultMonitoringRecord_0=ruleDefaultMonitoringRecord
		{
			$current = $this_DefaultMonitoringRecord_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKiekerMonitoringTypeAccess().getNewRecordParserRuleCall_1());
		}
		this_NewRecord_1=ruleNewRecord
		{
			$current = $this_NewRecord_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefaultMonitoringRecord
entryRuleDefaultMonitoringRecord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultMonitoringRecordRule()); }
	iv_ruleDefaultMonitoringRecord=ruleDefaultMonitoringRecord
	{ $current=$iv_ruleDefaultMonitoringRecord.current; }
	EOF;

// Rule DefaultMonitoringRecord
ruleDefaultMonitoringRecord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Reuse:'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultMonitoringRecordAccess().getReuseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefaultMonitoringRecordRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDefaultMonitoringRecordAccess().getNameKiekerRecordCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleNewRecord
entryRuleNewRecord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewRecordRule()); }
	iv_ruleNewRecord=ruleNewRecord
	{ $current=$iv_ruleNewRecord.current; }
	EOF;

// Rule NewRecord
ruleNewRecord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new:'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewRecordAccess().getNewKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNewRecordAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewRecordRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNewRecordAccess().getTypeRecordTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleRecordType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewRecordRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"kieker.otel.translation.Otkt.RecordType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getNewRecordAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewRecordAccess().getAttributesRecordAttributeParserRuleCall_4_0());
				}
				lv_attributes_4_0=ruleRecordAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewRecordRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_4_0,
						"kieker.otel.translation.Otkt.RecordAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getNewRecordAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRecordAttribute
entryRuleRecordAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordAttributeRule()); }
	iv_ruleRecordAttribute=ruleRecordAttribute
	{ $current=$iv_ruleRecordAttribute.current; }
	EOF;

// Rule RecordAttribute
ruleRecordAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordAttributeAccess().getTypeTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"kieker.otel.translation.Otkt.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRecordAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecordAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSpanAttribute
entryRuleSpanAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpanAttributeRule()); }
	iv_ruleSpanAttribute=ruleSpanAttribute
	{ $current=$iv_ruleSpanAttribute.current; }
	EOF;

// Rule SpanAttribute
ruleSpanAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSpanAttributeAccess().getTypeTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpanAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"kieker.otel.translation.Otkt.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSpanAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpanAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSpanAttributeAccess().getAnnotationAnnotationEnumRuleCall_2_0_0());
					}
					lv_annotation_2_0=ruleAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpanAttributeRule());
						}
						set(
							$current,
							"annotation",
							lv_annotation_2_0,
							"kieker.otel.translation.Otkt.Annotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='by'
			{
				newLeafNode(otherlv_3, grammarAccess.getSpanAttributeAccess().getByKeyword_2_1());
			}
			(
				(
					lv_value_4_0=RULE_INT
					{
						newLeafNode(lv_value_4_0, grammarAccess.getSpanAttributeAccess().getValueINTTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSpanAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_5='dependsOn:'
			{
				newLeafNode(otherlv_5, grammarAccess.getSpanAttributeAccess().getDependsOnKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpanAttributeAccess().getDependencyDependencyEnumRuleCall_2_4_0());
					}
					lv_dependency_6_0=ruleDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpanAttributeRule());
						}
						set(
							$current,
							"dependency",
							lv_dependency_6_0,
							"kieker.otel.translation.Otkt.Dependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCustomMapping
entryRuleCustomMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomMappingRule()); }
	iv_ruleCustomMapping=ruleCustomMapping
	{ $current=$iv_ruleCustomMapping.current; }
	EOF;

// Rule CustomMapping
ruleCustomMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mapping:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomMappingAccess().getMappingKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomMappingRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCustomMappingAccess().getFromOtelSpanCrossReference_1_0());
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getCustomMappingAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomMappingRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getCustomMappingAccess().getToEObjectCrossReference_3_0());
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getCustomMappingAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomMappingAccess().getMappingRulesMappingRuleParserRuleCall_5_0());
				}
				lv_mappingRules_5_0=ruleMappingRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomMappingRule());
					}
					add(
						$current,
						"mappingRules",
						lv_mappingRules_5_0,
						"kieker.otel.translation.Otkt.MappingRule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCustomMappingAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMappingRule
entryRuleMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRuleRule()); }
	iv_ruleMappingRule=ruleMappingRule
	{ $current=$iv_ruleMappingRule.current; }
	EOF;

// Rule MappingRule
ruleMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingRuleAccess().getLeftSideOtelRefParserRuleCall_0_0());
				}
				lv_leftSide_0_0=ruleOtelRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRuleRule());
					}
					set(
						$current,
						"leftSide",
						lv_leftSide_0_0,
						"kieker.otel.translation.Otkt.OtelRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingRuleAccess().getToKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingRuleAccess().getRightSideKiekerReferenceParserRuleCall_2_0());
				}
				lv_rightSide_2_0=ruleKiekerReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRuleRule());
					}
					set(
						$current,
						"rightSide",
						lv_rightSide_2_0,
						"kieker.otel.translation.Otkt.KiekerReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOtelRef
entryRuleOtelRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtelRefRule()); }
	iv_ruleOtelRef=ruleOtelRef
	{ $current=$iv_ruleOtelRef.current; }
	EOF;

// Rule OtelRef
ruleOtelRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtelRefRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getOtelRefAccess().getRefEntityEObjectCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getOtelRefAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtelRefRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getOtelRefAccess().getRefAttributeSpanAttributeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleKiekerReference
entryRuleKiekerReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKiekerReferenceRule()); }
	iv_ruleKiekerReference=ruleKiekerReference
	{ $current=$iv_ruleKiekerReference.current; }
	EOF;

// Rule KiekerReference
ruleKiekerReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKiekerReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getKiekerReferenceAccess().getRefEntityEObjectCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getKiekerReferenceAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKiekerReferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getKiekerReferenceAccess().getRefAttributeEObjectCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleCollector
entryRuleCollector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectorRule()); }
	iv_ruleCollector=ruleCollector
	{ $current=$iv_ruleCollector.current; }
	EOF;

// Rule Collector
ruleCollector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='collector:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCollectorAccess().getCollectorKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectorAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='port:'
		{
			newLeafNode(otherlv_2, grammarAccess.getCollectorAccess().getPortKeyword_2());
		}
		(
			(
				lv_port_3_0=RULE_INT
				{
					newLeafNode(lv_port_3_0, grammarAccess.getCollectorAccess().getPortINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectorRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='hostname:'
		{
			newLeafNode(otherlv_4, grammarAccess.getCollectorAccess().getHostnameKeyword_4());
		}
		(
			(
				lv_hostname_5_0=RULE_STRING
				{
					newLeafNode(lv_hostname_5_0, grammarAccess.getCollectorAccess().getHostnameSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectorRule());
					}
					setWithLastConsumed(
						$current,
						"hostname",
						lv_hostname_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCollectorAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Rule RecordType
ruleRecordType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='flow'
			{
				$current = grammarAccess.getRecordTypeAccess().getFlowEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRecordTypeAccess().getFlowEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='normal'
			{
				$current = grammarAccess.getRecordTypeAccess().getNormalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRecordTypeAccess().getNormalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='beforeafter'
			{
				$current = grammarAccess.getRecordTypeAccess().getBeforeafterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRecordTypeAccess().getBeforeafterEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Dependency
ruleDependency returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='default'
			{
				$current = grammarAccess.getDependencyAccess().getDEFAULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDependencyAccess().getDEFAULTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='global'
			{
				$current = grammarAccess.getDependencyAccess().getGlobalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDependencyAccess().getGlobalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='parent'
			{
				$current = grammarAccess.getDependencyAccess().getParentEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDependencyAccess().getParentEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Annotation
ruleAnnotation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='default'
			{
				$current = grammarAccess.getAnnotationAccess().getDEFAULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAnnotationAccess().getDEFAULTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='inc'
			{
				$current = grammarAccess.getAnnotationAccess().getINCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAnnotationAccess().getINCEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='dec'
			{
				$current = grammarAccess.getAnnotationAccess().getDECEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAnnotationAccess().getDECEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='mult'
			{
				$current = grammarAccess.getAnnotationAccess().getMULTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAnnotationAccess().getMULTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='divide'
			{
				$current = grammarAccess.getAnnotationAccess().getDIVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAnnotationAccess().getDIVEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='default'
			{
				$current = grammarAccess.getTypeAccess().getDefaultEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getDefaultEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='int'
			{
				$current = grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='string'
			{
				$current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='long'
			{
				$current = grammarAccess.getTypeAccess().getLongEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getLongEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='float'
			{
				$current = grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='double'
			{
				$current = grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='bool'
			{
				$current = grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
